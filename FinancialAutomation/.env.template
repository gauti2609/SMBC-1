# ==============================================================================
# FINANCIAL AUTOMATION - ENVIRONMENT CONFIGURATION
# ==============================================================================
# Copy this file to .env and update with your actual values
# DO NOT commit .env file to version control (add to .gitignore)
#
# For PostgreSQL setup on Asustor NAS, see: NETWORK_DATABASE_ARCHITECTURE.md
# ==============================================================================

# ------------------------------------------------------------------------------
# DATABASE CONFIGURATION
# ------------------------------------------------------------------------------
# Options: 'sqlite' (local/development) or 'postgresql' (network/production)
DB_TYPE=sqlite

# ------------------------------------------------------------------------------
# POSTGRESQL SETTINGS (only if DB_TYPE=postgresql)
# ------------------------------------------------------------------------------
# NAS/Server IP address (e.g., 192.168.1.100 for local network)
DB_HOST=192.168.1.100

# PostgreSQL port (default: 5432)
DB_PORT=5432

# Database name (created during PostgreSQL setup)
DB_NAME=financial_automation

# Database username (created during PostgreSQL setup)
DB_USER=smbc_app_user

# Database password (CHANGE THIS to a strong password!)
DB_PASSWORD=YourSecurePassword123!

# SSL mode: prefer (try SSL, fallback to plain), require (SSL only), disable (no SSL)
# For local network: prefer or disable
# For remote access: require
DB_SSLMODE=prefer

# Connection timeout in seconds
DB_TIMEOUT=10

# ------------------------------------------------------------------------------
# CONNECTION POOL SETTINGS (PostgreSQL only)
# ------------------------------------------------------------------------------
# Minimum number of connections to keep open
POOL_MIN_CONN=1

# Maximum number of concurrent connections
# Adjust based on expected users: 2-5 users = 10, 5-10 users = 20, 10+ users = 30
POOL_MAX_CONN=20

# ------------------------------------------------------------------------------
# LICENSE SERVER (for network deployment)
# ------------------------------------------------------------------------------
# Leave blank for local file-based licensing
# Set to NAS IP with port if using license server (e.g., https://192.168.1.100:8443)
LICENSE_SERVER=

# License validation timeout in seconds
LICENSE_TIMEOUT=5

# Offline grace period in days (how long app works without license server connection)
LICENSE_GRACE_DAYS=7

# ==============================================================================
# QUICK SETUP GUIDE
# ==============================================================================
#
# FOR SQLITE (SINGLE USER, LOCAL):
# 1. Set DB_TYPE=sqlite
# 2. Done! (all other settings ignored)
#
# FOR POSTGRESQL ON NAS (MULTI-USER, NETWORK):
# 1. Install PostgreSQL on Asustor NAS via App Central
# 2. Create database and user (see commands below)
# 3. Set DB_TYPE=postgresql
# 4. Update DB_HOST with your NAS IP
# 5. Update DB_NAME, DB_USER, DB_PASSWORD with values from step 2
# 6. Save this file as .env in the application directory
#
# ==============================================================================
# POSTGRESQL SETUP COMMANDS (RUN ON NAS)
# ==============================================================================
#
# After installing PostgreSQL via Asustor App Central:
#
# 1. SSH into NAS or use PostgreSQL terminal
# 2. Connect as postgres user:
#    psql -U postgres
#
# 3. Run these commands (replace PASSWORD with your secure password):
#
# CREATE DATABASE financial_automation
#     WITH ENCODING='UTF8'
#     LC_COLLATE='en_US.UTF-8'
#     LC_CTYPE='en_US.UTF-8';
#
# CREATE USER smbc_app_user WITH PASSWORD 'YourSecurePassword123!';
#
# GRANT ALL PRIVILEGES ON DATABASE financial_automation TO smbc_app_user;
#
# ALTER DATABASE financial_automation OWNER TO smbc_app_user;
#
# \q  (to exit psql)
#
# 4. Update this .env file with the same values
# 5. Test connection with: python test_postgres_connection.py
#
# ==============================================================================
# TESTING DATABASE CONNECTION
# ==============================================================================
#
# After configuring .env:
# 1. Run: python -c "from config.database import get_connection; print('âœ… Connected!')"
# 2. Or use the test script: python test_database_connection.py
#
# ==============================================================================
